# Title Page

*Title*: Bioboxes - standardised containers for interchangeable bioinformatics
software

*Authors*: Peter Belmann (1), Johannes Dröge (2), Michael Barton \* (3)

  1) Universität Bielefeld, Technische Fakultät, AG Praktische Informatik,
  D-33594 Bielefeld, Germany

  2) Helmholtz Centre for Infection Research, Computational Biology of Infection
  Research, 38124 Braunschweig, Germany

  3) DOE Joint Genome Institute, 2800 Mitchell Drive, Walnut Creek, CA 94598,
  USA

  \* Corresponding author: mail@michaelbarton.me.uk

*Running Title*: bioboxes software containers

# Abstract

Software is now both central and essential to modern biology. Yet lack of
availability, difficult installations, and complex user interfaces make software
hard to obtain and use. Containerisation, as exemplified by Docker, has the
potential to solve the problems associated with sharing software. A Biobox is
a bioinformatics container with a standardised interface which makes similar
bioinformatics software interchangeable.

# Keywords

bioinformatics, software, Docker, standards, usability

# Main Text

The increasing size of data in biology has demanded a corresponding increase in
the reliance on software to automate tasks that have become impossible to do
manually [Ouzounis2012]. Miniaturisation of DNA sequencers has allowed greater
access to genomic data where also small facilities can afford to do large-scale
genomic sequencing. Biology in 2015 requires a researcher to be using a
pipette one day, and running genome assembly software the next. As the field
changes to where scientists are expected to regularly use bioinformatics tools,
the difficulty to share academic software is becoming more and more of a hindrance
not only to every-day research but also to the entire peer reviewing and publication
process where decisions should base on reproducible results rather than trust.

Bioinformatics software is seen as research output and published as journal
articles. This then follows that a bioinformatics software developer is
measured by the same metric as a biologist studying novel protein mechanisms -
the more articles the better. This has lead to proliferation of bioinformatics
software - the Wikipedia page for sequence aligners alone lists 64 different
implementations. Perverse incentives have lead to a fire-and-forget approach to software;
publishing multiple software articles is rewarded while no direct metrics exist
for maintaining existing software [chang2015]. The *status quo* serves authors by
allowing them to generate long publication lists, and serves publishers by
generating revenue through article processing fees. The intended audience, the
biologists trying to do research, are then left to wade through a corpus of
buggy, inconsistent and confusing tools [stein2002]. This commentary addresses
three prominent symptoms of this system: lack of software availability, difficulty
installing software, and strongly divergent formats and interfaces for common tasks.

## Lack of software availability

A ridiculous situation in the publication system is that publishing an article
about software does not guarantee that the tool is actually available to
download. Unless the journal specifically mandates the use of a third party
service to host the software, the article may describe the tool as being
"available on request" - the reader has to contact the author for access. If
the author cannot (or doesn't want to) be contacted then this software essentially
ceases to exist.

Another common situation is that software is unavailable because the developer
has moved on to a different position, or if the research funding supporting
their position ends. This results in the developer no longer being able to
maintain the software, the website describing the tool no longer existing, or
both. A study related to this effect showed that, in many cases, bioinformatics
web addresses are often not available 2-3 years after the article describing it
was published. [klien2014]

## Difficulty installing software

Differences between operating systems and hardware cause an additional effort
in delivering software in a ready-to-use form. One example is when software is
written in a high-level language such as C++ which must be 'compiled' to
generate platform-specific binaries. Even if programs are written using
'platform-independent' languages such as Java or Python, the consideration of all
software dependencies means a huge investment of time to package or install the
bioinformatics software - not speaking of the required expertise. As software
delivery and maintenance makes no part in the revenues of publishing, the
biologist is usually left with the work of compiling the source code, manually
installing required software libraries and debugging platform-incompatible code,
for instance to to decipher obscure output such as GNU make reporting a g++ error
because the wrong version of libboost-dev is installed.

## Lack of standards

Every piece of bioinformatics software has a different interface even when
performing the same kind of operation. For example no two short read aligners
may be expected to use the same method to identify the input file for processing,
e.g. this might be `--input`, `--fastq` or the position in the input arguments.
The output BAM file generated by the tool may be created in different locations,
or the output may not be stored in BAM at all. Across all available short read
aligners this leads to a multitude of different ways of doing the same task each
time: take a list of sequence reads and return a description of how they map to
a reference genome.

This leads to the current situation - where researchers spend much of their
time shifting data between the incompatible interfaces of different tools and
converting to required data formats. Is there a good reason why short read aligners,
which all do the same task, should not be standardised with the same interface?
How about genome assemblers, FASTQ preprocessors or multiple sequence aligners?
The tools for each of these tasks essentially perform the same operation, but each
has a different interface. Again, the current situation does not serve intended
users the software is written for \- biologists and bioinformaticians.

## Software containerisation and standardisation

A container is somewhat like a lightweight virtual machine but stripped down to
only contain all the userland software layer. Although not a new concept, its
recent realization in the Linux OS has boosted the technology for different
applications and has enabled the Docker platform which allows the creation 
of virtual containers in which developers can install their software along
with all required libraries and scripts. The bioinformatics field has quickly
recognised the opportunity provided by software containerisation. Docker allows
containers to be shared via a central download site and used the same way as if
the tool itself were installed. Most importantly, this approach doesn't dictate
a specific software framework or language for implementing bioinformatics programs
and integrates seamlessly with existing software while keeping the work for the
creation of containers to a minimum. Thus, containerisation has the potential
to solve the problems of software availability and installation outlined before,
where bundling all dependencies removes the need for the user to compile and
install anything (except Docker itself). Software containers also provide
researchers with the option to reproduce existing published results to replicate
or expand on the work of others. An example of this are the nucleotid.es and
CAMI assembly benchmarking projects, where a containerised benchmarked tool is
available for download by users.

To this end we, developers involved in both CAMI and nucleotid.es, have created
the bioboxes project [bioboxes.org] with the aim of specifying standardised
bioinformatics containers. A biobox is a software container with a standardised
interface which describes what kind of input files and parameters are
accepted, and which output files are to be returned. An example is a short-read
assembler which takes an input paired-FASTQ file and returns a contigs FASTA file.
Each developer creating a biobox should make sure the container accepts these
inputs and returns the expected outputs.

Specifying the same interface for containers performing the same task
allows one to be swapped for another in a pipeline. This creates an
interchangeable parts list for researchers which, combined with Docker
containerisation, means biologists and bioinformaticians have access and can
immediately use a large body of bioinformatics software. Figure 1 contrasts the
existing state of bioinformatics software with bioboxes standardised software
containers. Figure 2 shows a command line interface to bioboxes which allows
the reader to test using a biobox.

We ask that developers try following the documentation on the bioboxes.org
website and contribute biobox-compatible Docker images of their software. The
users, biologists and bioinformaticians, editors and reviewers, should begin
requesting that biobox versions of software are available alongside
publications. At the same time the bioboxes project welcomes feedback from the
community and the website contains links on how to get involved through filling
file bug reports or asking questions in the chat room. Ultimately
standardisation and the ensuing benefits will only be successful if they are
both accepted and driven by the bioinformatics community itself.

# Conclusion

The way bioinformatics software is currently delivered works against the users,
consuming time and effort, and against reproducible science. The use of software
containers with standardised interfaces provides the glue to satisfy both biologists,
by making it simpler to access a great variety of software, and software developers,
by keeping their ways of developing unchanged and at the same time making their
software available and usable to a greater audience.

# Competing interests

Docker Inc paid for MB's flight and accommodation allowing him to present
research at DockerCon Europe.

# Authors' contributions

PB, JD and MB conceived and created bioboxes, implementing all code and
creating documentation. MB wrote the manuscript.

# Authors' information

PB and JD are developers in CAMI, a project to benchmark bioinformatics tools
for metagenomics. MB created nucleotid.es a project to benchmark genome
assembly software. Both of these projects use Docker containers to ensure
benchmarking are reproducible.

# Acknowledgements

The authors with to thank Rutger Vos, Scott Edmunds, Andreas Bremges, Yasset
Perez-Riverol, and Felipe Leprevost for proof reading the article. The authors
also wish to thank all members of the bioinformatics community who have
provided feedback through comments, issues and the bioboxes chatroom.

# Figure legends

## Figure 1

Contrasting the current software situation in bioinformatics with using biobox
Docker containers with standardised interfaces.

## Figure 2

Example of bioboxes command line interface.

``` bash

pip install --user biobox_cli

biobox short_read_assembler bioboxes/velvet --input reads.fq.gz --output contigs.fa
biobox short_read_assembler bioboxes/megahit --input reads.fq.gz --output contigs.fa

```
